class User < ActiveRecord::Base
  attr_accessible :email, :lastname, :name, :password, :password_confirmation
  attr_accessor :password
  
  before_save :encrypt_password
  
  has_many:contents
  validates_associated :contents
  
  validates :email,   
        :presence => true,
        :format => { :with => /\A[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]+\z/, :message => "Write a correct email" },
        :uniqueness => true
        
  validates :name,   
        :presence => true,
        :format => { :with => /^[a-zA-Z]{1,20}$/, :message => "Only letters, max 20." },
        :length => { :in => 1..20 }
        
        
  validates :lastname,   
        :presence => true,
        :format => { :with => /^[a-zA-Z]{1,20}$/, :message => "Only letters, max 20." },
        :length => { :in => 1..20 }
        
        
  validates :password, :password_confirmation,  
        :presence => true,
        :format => { :with => /^[a-z0-9_-]{6,20}$/  , :message => "Password must be 6 to 20 characters" },
        :length => { :in => 6..20 },
        :confirmation => true
        
        
  def encrypt_password
  		if password.present?
  			self.password_salt = BCrypt::Engine.generate_salt
  			self.password_hash = BCrypt::Engine.hash_secret(password, password_salt)
  		end
  end
  
#MÃ©todo de autenticar el usuario
 def self.authenticate(email, password)
   user = find_by_email(email)
   if user && user.password_hash == BCrypt::Engine.hash_secret(password, user.password_salt)
     user
   else
     nil
   end
 end
  
end
	